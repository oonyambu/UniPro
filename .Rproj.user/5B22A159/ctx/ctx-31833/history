stack(df)
aggregate(.~ind, stack(df), tail, 1)
Test <- data.frame(
ID = c(1, 2),
Email = c("user1@example.com", "user2@example.com"),
Name = c("Alice", "Bob"),
Company = c("Company A", "Company B"),
TripIdentifier = c("Trip 1", "Trip 2"),
Date1 = as.Date(c("2022-01-01", "2022-01-02")),
Campsite1 = c("A", "B"),
NumberOfAnimals1 = c(5, 5),
Date2 = as.Date(c("2022-01-02", "2022-01-03")),
Campsite2 = c("C", "D"),
NumberOfAnimals2 = c(5, 5),
stringsAsFactors = FALSE
)
library("tidyverse")
?pivot_longer_spec(Test, )
pivot_longer(Test, matches("\\d$"), names_to = c("nm", ".value"), names_pattern = "(.+)(\\d+)")
pivot_longer(Test, matches("\\d$"), names_to = c(".value", "nm"), names_pattern = "(.+)(\\d+)")
pivot_longer(Test, matches("\\d$"), names_to = c(".value", "trip"), names_pattern = "(.+)(\\d+)")
knitr::opts_chunk$set(echo = TRUE)
options(width = 95)
library(knitr)
library(tidyverse)
iris %>%
group_by(Species) %>%
summarise(across(everything(), list(m=mean, s=sd)),  n = n())
iris %>%
group_by(Species) %>%
summarise(across(everything(), list(m=mean, s=sd), .names = "{.var}"),  n = n())
iris %>%
group_by(Species) %>%
summarise(across(everything(), list(m=mean, s=sd),
.names = "{str_replace(., '\\.(\\w{3}).*'), '\\2'}"),  n = n())
iris %>%
group_by(Species) %>%
summarise(across(everything(), list(m=mean, s=sd),
.names = "{str_replace(., '\\.(\\w{3}).*'), '\\2'}"),  n = n())
iris %>%
group_by(Species) %>%
summarise(across(everything(), list(m=mean, s=sd),
.names = "{str_replace(.x, '\\.(\\w{3}).*'), '\\2'}"),  n = n())
iris %>%
group_by(Species) %>%
summarise(across(everything(), list(m=mean, s=sd),
.names = "{~str_replace(.x, '\\.(\\w{3}).*'), '\\2'}"),  n = n())
iris %>%
group_by(Species) %>%
summarise(across(everything(), list(m=mean, s=sd),
.names = "{str_replace(col, '\\.(\\w{3}).*'), '\\2'}"),  n = n())
iris %>%
group_by(Species) %>%
summarise(across(everything(), list(m=mean, s=sd),
.names = "{str_replace(col, '[.](\\w{3}).*'), '\\2'}"),  n = n())
iris %>%
group_by(Species) %>%
summarise(across(everything(), list(m=mean, s=sd),
.names = "{str_replace(col, '[.]([A-z]{3}).*'), '\\2'}"),  n = n())
iris %>%
group_by(Species) %>%
summarise(across(everything(), list(m=mean, s=sd),
.names = "{str_replace(col, '[.]([A-z]{3}).*', '\\2')}"),  n = n())
iris %>%
group_by(Species) %>%
summarise(across(everything(), list(m=mean, s=sd),
.names = "{str_replace(col, '[.]([A-z]{3}).*', '\\1')}"),  n = n())
iris %>%
group_by(Species) %>%
summarise(across(everything(), list(m=mean, s=sd),
.names = "{str_remove(col, '.')"),  n = n())
iris %>%
group_by(Species) %>%
summarise(across(everything(), list(m=mean, s=sd),
.names = "{str_remove(col, '.')}"),  n = n())
iris %>%
group_by(Species) %>%
summarise(across(everything(), list(m=mean, s=sd),
.names = "{str_remove(col, '[.]')}"),  n = n())
iris %>%
group_by(Species) %>%
summarise(across(everything(), list(m=mean, s=sd),
.names = "{str_remove(col, '[.]')}{fn}"),  n = n())
iris %>%
group_by(Species) %>%
summarise(across(everything(), list(m=mean, s=sd),
.names = "{fn}{str_remove(col, '[.]')}"),  n = n())
iris %>%
group_by(Species) %>%
summarise(across(everything(), list(m=mean, s=sd),
.names = "{fn}{str_remove(col, '\\.')}"),  n = n())
iris %>%
group_by(Species) %>%
summarise(across(everything(), list(m=mean, s=sd),
.names = "{fn}{str_remove(col, '[.]')}"),  n = n())
iris %>%
group_by(Species) %>%
summarise(across(everything(), list(m=mean, s=sd),
.names = "{fn}{str_remove(col, '[.].*')}"),  n = n())
iris %>%
group_by(Species) %>%
summarise(across(everything(), list(m=mean, s=sd),
.names = "{fn}{str_replace(col, '[.](.{3})', '\\2')}"),  n = n())
iris %>%
group_by(Species) %>%
summarise(across(everything(), list(m=mean, s=sd),
.names = "{fn}{str_replace(col, '[.](.{3}).*', '\\2')}"),  n = n())
iris %>%
group_by(Species) %>%
summarise(across(everything(), list(m=mean, s=sd),
.names = "{fn}{str_replace(col, '[.](.{3})', '\\2')}"),  n = n())
?acrss
?across
iris %>%
group_by(Species) %>%
summarise(across(everything(), list(m=mean, s=sd),
.names = "{fn}{str_replace(.col, '[.](.{3})', '\\2')}"),  n = n())
iris %>%
reframe(across(starts_with("Sepal"), quantile_df, .unpack = "{outer}.{inner}"))
iris %>%
group_by(Species) %>%
summarise(across(everything(), list(m=mean, s=sd),
.names = "{fn}{.col}"),  n = n())
iris %>%
rename_with(~str_replace(.x, "\\.(\\w{3}).*", "\\1"))
iris %>%
rename_with(~str_replace(.x, "\\.(\\w{3}).*", "\\1")) %>%
group_by(Species) %>%
summarise(across(everything(), list(m=mean, s=sd), .names = "{fn}{.col}"),  n = n())
t.test
t.test(iris$Sepal.Length[1:50], iris$Sepal.Length[51:100])
t.test(Sepal.Length~Species, iris, Species == 1:100)
t.test(Sepal.Length~unclass(Species), iris, Species == 1:100)
t.test(Sepal.Length~unclass(Species), iris, rownames(iris) %in% 1:100)
t.test(Sepal.Length~(Species), iris, rownames(iris) %in% 1:100)
t.test(Sepal.Length~Species, iris, rownames(iris) %in% 1:100)
set.seed(1)
differences <- rep(NA, 10^4)
for(i in seq_along(differences)){
boot_population <- iris$Sepal.Length[1:100]
groupA <- sample(boot_population, 50, replace = TRUE)
groupB <- sample(boot_population, 50, replace = TRUE)
differences[i] <- mean(groupA) - mean(groupB)
}
summary(differences)
set.seed(1)
replicate(1e4, -diff(tapply( iris$Sepal.Length[1:100], sample(2, 100, TRUE), mean)))
set.seed(1)
a <- replicate(1e4, -diff(tapply( iris$Sepal.Length[1:100], sample(2, 100, TRUE), mean)))
summary(a)
set.seed(1)
boot_population <- iris$Sepal.Length[1:100]
a <- replicate(1e4, -diff(colMeans(replicate(2, sample(boot_population, 50, TRUE)))))
summary(a)
set.seed(1)
replicate(1e4, -diff(tapply(boot_population, sample(2, 100, TRUE), mean)))|>summary()
set.seed(1)
replicate(1e4, -diff(tapply(boot_population, sample(2, 100, TRUE), mean)))|>summary()
replicate(1e4, -diff(tapply(boot_population, sample(2, 100, TRUE), mean)))>0.93|>mean()
(replicate(1e4, -diff(tapply(boot_population, sample(2, 100, TRUE), mean)))>0.93)|>mean()
?do.call
params <- c(sd = 2, mean = 5)
args <- c(list(1:3), as.list(params))
args
do.call(dnorm, args)
dnorm(1:3, 5, 2) # similar to above
set.seed(1)
res <- numeric(1e4)
set.seed(1)
res <- numeric(1e4)
set.seed(1)
res <- numeric(1e4)
for(i in 1:1e^4){
set.seed(1)
res <- numeric(1e4)
for(i in 1:1e4){
d <- sample(boot_population, 100, TRUE)
res[i] <- mean(d[1:50]) - meand(d[51:100])
}
set.seed(1)
res <- numeric(1e4)
for(i in 1:1e4){
d <- sample(boot_population, 100, TRUE)
res[i] <- mean(d[1:50]) - mean(d[51:100])
}
summary(res)
set.seed(1)
replicate(1e4, diff(tapply(boot_population, sample(2, 100, TRUE), mean)))
set.seed(1)
replicate(1e4, diff(tapply(boot_population, sample(2, 100, TRUE), mean)))|>
summary()
set.seed(1)
replicate(1e4, -diff(tapply(boot_population, sample(2, 100, TRUE), mean)))|>
summary()
gl(50, 2)
gl(2, 50)
gr <- gl(2, 50)
set.seed(1)
gr <- gl(2, 50)
replicate(1e4, -diff(tapply(sample(boot_population), gr, mean)))|>
summary()
?uniroot
integrate(\(x)Vectorize(\(y)integrate(\(x,y)6*x*y^2, 0,1)$value), 0, 1)
integrate(\(x)Vectorize(\(y)integrate(\(y)6*x*y^2, 0,1)$value), 0, 1)
integrate(\(y)6*x*y^2, 0, 1)
integrate(\(y)6*x*y^2, 0, 1)$value
\(x)integrate(\(y)6*x*y^2, 0, 1)$value
Vectorize(\(x)integrate(\(y)6*x*y^2, 0, 1)$value)
integrate(Vectorize(\(x)integrate(\(y)6*x*y^2, 0, 1)$value), 0, 1)
integrate(Vectorize(\(x)integrate(\(y)6*x*y^2, 1-x, 1)$value), 0, 1)
aov(Sepal.Length~Sepal.Width, iris)
aov(Sepal.Length~Sepal.Width, iris)|>anova()
sqrt(.Machine$double.eps)
sqrt(.Machine$double.eps)|>sqrt()
?aspell
14000*120
14000*120/1e6
library(stats102a123456789)
as_pqnumber(10)
15*29
55000/1.9
55000/2
15.25*1.1
15.25*1.15
15.25*1.11
15.25*1.12
1.9*1.12
1.88*1.12
1.96*1.12
76555*1.12
28000*2.2
28000*2.2/3.25
df1 <- data.frame(x = c(1, 2, NA, 4, NA), y = c(6, NA, 8, 9, NA))
Map(combn, 2:3, MoreArgs = list(x = df1))
Map(combn, 1:2, MoreArgs = list(x = df1))
Map(combn, 1:2, MoreArgs = list(x = df1, simplify = FALSE))
df
df1
read.table(text=readClipboard())
read.table(text=readClipboard())->df1
Map(combn, 1:2, MoreArgs = list(x = df1, simplify = FALSE))
Map(combn, 1:2, MoreArgs = list(x = df3, simplify = FALSE))
Map(combn, seq_along(df1), MoreArgs = list(x = df1, simplify = FALSE))
Map(combn, seq_along(df1), MoreArgs = list(x = df1, simplify = FALSE, do.call, what = paste)
)
Map(combn, seq_along(df1), MoreArgs = list(x = df1, simplify = FALSE, do.call, what = paste))
Map(combn, seq_along(df1), MoreArgs = list(x = df1, do.call, what = paste))
mapply(combn, seq_along(df1), MoreArgs = list(x = df1, do.call, what = paste))
do.call(cbind, mapply(combn, seq_along(df1), MoreArgs = list(x = df1, do.call, what = paste)))
do.call(cbind, mapply(combn, seq_along(df1), MoreArgs = list(x = df1, do.call, what = paste0)))
df1
list(x = df1, FUN = \(x)data.frame(do.call(paste0, x)))|>
mapply(combn, seq_along(df1), MoreArgs = _)
list(x = df1, FUN = \(x)do.call(paste0, x))|>
mapply(combn, seq_along(df1), MoreArgs = _)
list(x = df1, FUN = \(x)do.call(paste0, x), simplify = FALSE)|>
mapply(combn, seq_along(df1), MoreArgs = _)
list(x = df1, FUN = \(x)list2DF(do.call(paste0, x)))|>
mapply(combn, seq_along(df1), MoreArgs = _)
list(x = df1, FUN = \(x)list2DF(do.call(paste0, x)), simplify = F)|>
mapply(combn, seq_along(df1), MoreArgs = _)
list(x = df1, FUN = \(x)do.call(paste0, x), simplify = F)|>
mapply(combn, seq_along(df1), MoreArgs = _)
list(x = df1, do.call, what = paste0) |>
mapply(combn, seq_along(df1), MoreArgs = _)
list(x = df1, do.call, what = paste0) |>
mapply(combn, seq_along(df1), MoreArgs = _)
list(x = df1, \(x)do.call(paste0, x)) |>
mapply(combn, seq_along(df1), MoreArgs = _)
list(x = df1, \(x)c(paste0(names(x)), do.call(paste0, x))) |>
mapply(combn, seq_along(df1), MoreArgs = _)
list(x = df1, \(x)c(paste0(names(x), collapse = ""), do.call(paste0, x))) |>
mapply(combn, seq_along(df1), MoreArgs = _)
args <- list(x = df1, \(x)c(paste0(names(x), collapse = ""), do.call(paste0, x)))
lapply(seq_along(df1), \(x)do.call(combn, c(n = x, args)))
lapply(seq_along(df1), \(i)do.call(combn, c(n = i, args)))
combn
lapply(seq_along(df1), \(i)do.call(combn, c(m = i, args)))
lapply(seq_along(df1), \(i)do.call(combn, c(m = i, args))[-1])
lapply(seq_along(df1), \(i)do.call(combn, c(m = i, args))[-1,])
UniPro(30,3)
UniPro <-function(n, m, s = n, NP = 100, itermax = 1500, pMut = NULL,
pCR = NULL, pGBest = NULL, replicates = 1,
seed = sample(1e7,1), ncores = NULL){
if(is.null(pGBest)) pGBest <- 0.9
args <- list(n = n, m = m, s = s, NP = NP, itermax = itermax, pMut = pMut,
pCR = pCR, pGBest = pGBest, replicates = replicates,
seed = seed, ncores = ncores, method = "UniPro")
if(is.null(pMut)&&is.null(pCR)){
p <- seq(0.05, 0.5, 5)
q <- rev(p)
v <- do.call(mapply, c(DE, modifyList(args, list(pMut = p, pCR = q))))
return(v)
idx <- which.min(unlist(v["measure", ]))
args$pCR <- q[idx]
args$pMut <- p[idx]
}
do.call(DE, args)
}
UniPro(30,3)
devtools::document()
UniPro(30,3)
UniPro <-function(n, m, s = n, NP = 100, itermax = 1500, pMut = NULL,
pCR = NULL, pGBest = NULL, replicates = 1,
seed = sample(1e7,1), ncores = NULL){
if(is.null(pGBest)) pGBest <- 0.9
args <- list(n = n, m = m, s = s, NP = NP, itermax = itermax, pMut = pMut,
pCR = pCR, pGBest = pGBest, replicates = replicates,
seed = seed, ncores = ncores, method = "UniPro")
if(is.null(pMut)&&is.null(pCR)){
p <- seq(0.05, 0.5, 5)
q <- rev(p)
return(args)
v <- do.call(mapply, c(DE, modifyList(args, list(pMut = p, pCR = q))))
return(v)
idx <- which.min(unlist(v["measure", ]))
args$pCR <- q[idx]
args$pMut <- p[idx]
}
do.call(DE, args)
}
devtools::document()
UniPro(30,3)
UniPro(30,3)->args
do.call(mapply, c(DE, modifyList(args, list(pMut = p, pCR = q))))
p <- seq(0.05, 0.5, 5)
q <- rev(p)
do.call(mapply, c(DE, modifyList(args, list(pMut = p, pCR = q))))
c(DE, modifyList(args, list(pMut = p, pCR = q)))
p <- seq(0.05, 0.5, length = 5)
q <- rev(p)
UniPro(30,3)->args
args
c(DE, modifyList(args, list(pMut = p, pCR = q)))
do.call(mapply, c(DE, modifyList(args, list(pMut = p, pCR = q))))
modifyList(args, list(pMut = p, pCR = q))
args
args$pCR <- NULL
args
args$pCr <- args$pMut <- NULL
v <- do.call(mapply, c(DE, list(pMut = p, pCR = q), MoreArgs = args))
v
c(DE, list(pMut = p, pCR = q), MoreArgs = args)
list(DE, list(pMut = p, pCR = q), MoreArgs = args)
do.call(mapply, list(DE, list(pMut = p, pCR = q), MoreArgs = args))
p
args
list(DE, list(pMut = p, pCR = q), MoreArgs = args)
v <- do.call(mapply, list(DE, pMut = p, pCR = q, MoreArgs = args))
devtools::document()
UniPro(30,3)
devtools::document()
UniPro(30,3)
devtools::document()
UniPro(30,3)
devtools::document()
UniPro(30,3)
UniPro(30,3, trace = TRUE)
devtools::document()
UniPro(30,3, trace = TRUE)
devtools::document()
UniPro(30,3, trace = TRUE)
UniPro(30,3, trace = 2)
devtools::document()
UniPro(30,3, trace = 2)
UniPro(30, 3, pMut = 0.3, pCR = 0.2, trace = 2)
UniPro(30, 3, pMut = 0.3, pCR = 0.9, trace = 2)
UniPro(30, 3, pMut = 0.3, pCR = 0.9, trace = 2, replicates = 100)->a
UniPro(30, 3, pMut = 0.3, pCR = 0.9, trace = TRUE, replicates = 100)->b
devtools::document()
UniPro(30, 3, pMut = 0.1, pCR = 0.9, trace = TRUE, replicates = 100)->b
b
UniPro(30, 3, pMut = 0.0, pCR = 0.9, trace = TRUE, replicates = 100)->d
d
UniPro(30, 3, pMut = 0.001, pCR = 0.9, trace = TRUE, replicates = 100)->d
d
UniPro(30, 3, pMut = 0.01, pCR = 0.9, trace = TRUE, replicates = 100)->d
d
UniPro(30, 3, pMut = 0.01, pCR = 0, trace = TRUE, replicates = 100)->d
d
UniPro(30, 3, pMut = 0.02, pCR = 0, trace = TRUE, replicates = 100)->d
d
boxplot(list(a=a$measure, b=b$measure, d=d$measure))
UniPro(30, 3, pMut = 0.2, pCR = 0, trace = TRUE, replicates = 100)->d
boxplot(list(a=a$measure, b=b$measure, d=d$measure))
UniPro(30, 3, pMut = 0.3, pCR = 0, trace = TRUE, replicates = 100)->d
boxplot(list(a=a$measure, b=b$measure, d=d$measure))
UniPro(30, 3, pMut = 0.5, pCR = 0, trace = TRUE, replicates = 100)->d
boxplot(list(a=a$measure, b=b$measure, d=d$measure))
UniPro(30, 3, pMut = 0.9, pCR = 0, trace = TRUE, replicates = 100)->d
boxplot(list(a=a$measure, b=b$measure, d=d$measure))
UniPro(30, 3, pMut = 0.5, pCR = 0, trace = TRUE, replicates = 100)->d
boxplot(list(a=a$measure, b=b$measure, d=d$measure))
install.packages('rsm')
install.packages('texreg')
setwd("C:/Users/samon/OneDrive/Desktop/papers_complete/individual_papers/chapters/DE")
install.packages('SLHD')
SLHD::maximinSLHD
DE
devtools::document()
DE
DE(30, 3, replicates = 100, method = "maximinLHD")->a
SLHD::maximinSLHD(1,30,3)->b
a$timeTaken
replicate(100,SLHD::maximinSLHD(1,30,3))->b
b["time_rec"]
b["time_rec",]
sum(b["time_rec",])
sum(unlist(b["time_rec",]))
b["measure",]
hist(list(SA=unlist(b["measure",]),DE=a$measure))
boxplot(list(SA=unlist(b["measure",]),DE=a$measure))
replicate(100,SLHD::maximinSLHD(1,30,3,nstarts = 10))->b
sum(unlist(b["time_rec",]))
boxplot(list(SA=unlist(b["measure",]),DE=a$measure))
replicate(100,SLHD::maximinSLHD(1,30,3))->d
boxplot(list(SA=unlist(b["measure",]),DE=a$measure, SLHD=unlist(d["measure",])))
replicate(100,SLHD::maximinSLHD(1,30,3,nstarts = 15))->b
boxplot(list(SA=unlist(b["measure",]),DE=a$measure, SLHD=unlist(d["measure",])))
sum(unlist(b["time_rec",]))
?SLHD::maximinSLHD
boxplot(list(SA=unlist(b["measure",]),DE=a$measure))
setwd("C:/Users/samon/OneDrive/Desktop/papers_complete/individual_papers/chapters/DE")
b <- replicate(100,SLHD::maximinSLHD(1,30,3,nstarts = 15))
a <- DE(30, 3, replicates = 100, method = "maximinLHD", trace = 1)
sum(unlist(b["time_rec",]))
a$timeTaken
boxplot(list(SA=unlist(b["measure",]),DE=a$measure))
b <- replicate(100,SLHD::maximinSLHD(1,50,5,nstarts = 15))
a <- DE(50, 5, replicates = 100, method = "maximinLHD", trace = 1)
boxplot(list(SA=unlist(b["measure",]),DE=a$measure))
b50 <- unlist(b["measure",])
a50 <- a$measure
n<-30;m<-3;b <- replicate(100,SLHD::maximinSLHD(1,n,m,nstarts = 15)); a <- DE(n, m, replicates = 100, method = "maximinLHD", trace = 1);a30<-a$measure;b30<-unlist(b["measure",])
n<-70;m<-7;b <- replicate(100,SLHD::maximinSLHD(1,n,m,nstarts = 15)); a <- DE(n, m, replicates = 100, method = "maximinLHD", trace = 3);a70<-a$measure;b70<-unlist(b["measure",])
sum(unlist(b["time_rec",]))
boxplot(list(SA=unlist(b["measure",]),DE=a$measure))
ls(pattern = "^[ab]\\d+")
mget(ls(pattern = "^[ab]\\d+"))
data.frame(mget(ls(pattern = "^[ab]\\d+")))
getwd()
data.frame(mget(ls(pattern = "^[ab]\\d+")))|>write.table("data/maxipro.txt", row.names = FALSE)
dat <- read.table("data/maxipro.txt")
plot_maxi <- function(n){
boxplot(endsWith(names(dat), n))
}
plot_maxi(30)
dat <- read.table("data/maxipro.txt")
plot_maxi <- function(n){
boxplot(endsWith(names(dat), as.character(n)))
}
dat <- read.table("data/maxipro.txt")
plot_maxi(30)
endsWith(names(dat), as.character(n))
n
head(dat)
dat <- read.table("data/maxipro.txt", header = TRUE)
plot_maxi <- function(n){
boxplot(endsWith(names(dat), as.character(n)))
}
endsWith(names(dat), as.character(n))
plot_maxi <- function(n){
boxplot(dat[,endsWith(names(dat), as.character(n))])
}
plot_maxi(30)
a30 <- UniPr:::DE(30, 3, replicates = 100, method = "maximinLHD") # DE
a30 <- UniPro:::DE(30, 3, replicates = 100, method = "maximinLHD") # DE
b30 <- SLHD::maximinLHD(1, 30, 3, nstarts = 15)
a30 <- UniPro:::DE(30, 3, replicates = 100, method = "maximinLHD") # DE
#a30 <- UniPro:::DE(30, 3, replicates = 100, method = "maximinLHD") # DE
b30 <- SLHD::maximinSLHD(1, 30, 3, nstarts = 15)
#a30 <- UniPro:::DE(30, 3, replicates = 100, method = "maximinLHD") # DE
b30 <- replicate(100, SLHD::maximinSLHD(1, 30, 3, nstarts = 15))
sum(unlist(b["time_rec"]))
sum(unlist(b["time_rec",]))
cat("time DE", a$timeTaken, "SA:", sum(unlist(b["time_rec",])))
cat("time DE:", a$timeTaken, "SA:", sum(unlist(b["time_rec",])))
cat("time DE:", a$timeTaken, "SA:", sum(unlist(b["time_rec",])), "\n")
boxplot(list(DE=a$measure, SA=unlist(b["measure",])))
sessioninfo::platform_info()
na.omit(NA)
na.omit(NA)[1]
df <- data.frame(
record_id = c(1, 1, 1, 2, 2, 3, 3, 3),
instance = c(NA, NA, 2, NA, 1, 2, NA, NA),
A = c(10, NA, NA, 20, 25, NA, 30, NA),
B = c(NA, 5, NA, NA, 5, 15, NA, 15),
C = c(NA, NA, 3, NA, 5, 20, NA, 20),
D = c(NA, NA, NA, 25, 25, 30, NA, 30)
)
df
aggregate(.~record + instance, df, \(x)na.omit(x)[1], na.action = na.pass)
aggregate(.~record_id + instance, df, \(x)na.omit(x)[1], na.action = na.pass)
aggregate(.~record_id + instance, df, \(x)na.omit(x)[1], na.action = I)
aggregate(.~record_id + instance, df, \(x)na.omit(x)[1], na.action = identity)
aggregate(.~record_id + factor(instance), df, \(x)na.omit(x)[1], na.action = identity)
aggregate(.~record_id + factor(instance,exclude = F), df, \(x)na.omit(x)[1], na.action = identity)
aggregate(.~record_id + factor(instance,exclude = F), df, \(x)na.omit(x)[1])
aggregate(.~record_id + factor(instance,exclude = F), df, \(x)na.omit(x)[1],na.action = na.pass)
devtools::document()
DE(30, 3, replicates = 3, method = "maximinLHD")
DE(30, 3, replicates = 100, method = "maximinLHD", trace = 3)->a
b <- replicate(100, SLHD::maximinSLHD(1, 30, 3, nstarts = 15))
boxplot(list(DE = a$measure, SA = unlist(b["measure",])))
cat("time DE:", a$timeTaken, "SA:", sum(unlist(b["time_rec",])), "\n")
n <- 30
m <- 3
a <- UniPro:::DE(30, 3, replicates = 100, method = "maximinLHD")
b <- replicate(100, SLHD::maximinSLHD(1, 30, 3, nstarts = 15))
cat("time DE:", a$timeTaken, "SA:", sum(unlist(b["time_rec",])), "\n")
# time DE: 596.8633 SA: 916.1673
boxplot(list(DE = a$measure, SA = unlist(b["measure",])))
