}
between2 <- function(X, y){
apply(X, 1,
\(x)sqrt(colSums((t(y) - x)^2)))
}
X <- as.matrix(dat)
X <- as.matrix(faithful)
quantile <- 0.1
bandwidth <- apply(between2(X, X), 1, sort)[floor(nrow(X)*quantile), ]|>mean()
m <- X
for(i in 1:300)m <- prop.table(exp(-0.5*(between2(X, m)/bandwidth)^2), 1) %*% X
#m <- round(m, 4)
plot(X)
points(m, cex=3, pch=16, col=2:10)
set.seed(13)
v <- sample(5, 500, T)
for(i in 1:10){
centers <- sapply(dat, tapply, v, mean)
v <- max.col(-apply(centers, 1, \(x)colSums((t(X) - x)^2)))
}
################################################
link <- "https://raw.githubusercontent.com/oonyambu/ECON430/refs/heads/main/mean_shift.txt"
dat <- read.table(link, header = TRUE)
K1 <- function(X, h)as.matrix(dist(X/h))<1
K2 <- function(X, h) {
n <- nrow(X)
matrix(mvtnorm::dmvnorm((m[rep(1:n, n), ] - m[rep(1:n, each = n), ])/h), n)
}
X <- as.matrix(dat)
m <- X
bw <-1.5# estimate_bandwidth(m)
for(i in 1:10)m <- prop.table(K1(m, bw), 1) %*% m
plot(X)
points(m, cex=3, pch=16)
for(i in 1:10)m <- prop.table(K2(m, bw), 1) %*% m
m <- X
bw <-1.5# estimate_bandwidth(m)
for(i in 1:10)m <- prop.table(K2(m, bw), 1) %*% m
plot(X)
points(m, cex=3, pch=16)
?devtools::build(manual = TRUE)
?pkgbuild::build()
pkgbuild::build(manual = TRUE)
devtools::check()
b=UniPro(n, m, replicates = 10)
boxplot(list(a=a$measure, b=b$measure))
f <- function(p){
if(any(p>1 , p<0)) return(NA)
UniPro::UniPro(n, m, pMut = p[1], pCR = p[2], replicates = 10)$measure|>
mean()
}
a<-optim(c(0.1, 0.1), f)
n = 30; m <- 3
a<-optim(c(0.1, 0.1), f)
a
F(C(0.1075, 0.1075))
f(c(0.1075, 0.1075))
f(c(0.1075, 0.1))
f(c(0.05, 0.1))
f(c(0.05, 0.0))
f(c(0.00, 0.0))
f(c(0.001, 0.0))
f(c(0.001, 0.02))
f(c(0.001, 0.001))
f(c(0.01, 0.001))
f(c(0.1, 0.001))
f(c(0.2, 0.001))
f(c(0.2, 0.000))
f(c(0.5, 0.000))
f(c(0.9, 0.000))
f(c(0.95, 0.000))
f(c(0.95, 0.9))
f(c(0.95, 0.1))
f(c(0.95, 0.5))
f(c(0.95, 0))
f(c(0.5, 0))
f(c(0.3, 0))
f <- function(p){
if(any(p>1 , p<0)) return(NA)
UniPro::UniPro(n, m, pMut = p[1], pCR = p[2], replicates = 10)$measure
}
f(c(0.3, 0))
df <- data.frame(a = "a", b = "b", c = c("c", NA))
df
apply(df, 1, \(x)tail(x, 1))
apply(df, 1, \(x)tail(na.omit(x), 1))
cbind(df, apply(df, 1, \(x)tail(na.omit(x), 1)))
cbind(df, lowest_taxom=apply(df, 1, \(x)tail(na.omit(x), 1)))
cbind(df, lowest_taxon=apply(df, 1, \(x)tail(na.omit(x), 1)))
taooly(unlist(df), row(df), )
tapply(unlist(df), row(df), )
tapply(unlist(df), row(df), \(x)tail(na.omit(x), 1))
df
stack(df)
aggregate(.~ind, stack(df), tail, 1)
Test <- data.frame(
ID = c(1, 2),
Email = c("user1@example.com", "user2@example.com"),
Name = c("Alice", "Bob"),
Company = c("Company A", "Company B"),
TripIdentifier = c("Trip 1", "Trip 2"),
Date1 = as.Date(c("2022-01-01", "2022-01-02")),
Campsite1 = c("A", "B"),
NumberOfAnimals1 = c(5, 5),
Date2 = as.Date(c("2022-01-02", "2022-01-03")),
Campsite2 = c("C", "D"),
NumberOfAnimals2 = c(5, 5),
stringsAsFactors = FALSE
)
library("tidyverse")
?pivot_longer_spec(Test, )
pivot_longer(Test, matches("\\d$"), names_to = c("nm", ".value"), names_pattern = "(.+)(\\d+)")
pivot_longer(Test, matches("\\d$"), names_to = c(".value", "nm"), names_pattern = "(.+)(\\d+)")
pivot_longer(Test, matches("\\d$"), names_to = c(".value", "trip"), names_pattern = "(.+)(\\d+)")
knitr::opts_chunk$set(echo = TRUE)
options(width = 95)
library(knitr)
library(tidyverse)
iris %>%
group_by(Species) %>%
summarise(across(everything(), list(m=mean, s=sd)),  n = n())
iris %>%
group_by(Species) %>%
summarise(across(everything(), list(m=mean, s=sd), .names = "{.var}"),  n = n())
iris %>%
group_by(Species) %>%
summarise(across(everything(), list(m=mean, s=sd),
.names = "{str_replace(., '\\.(\\w{3}).*'), '\\2'}"),  n = n())
iris %>%
group_by(Species) %>%
summarise(across(everything(), list(m=mean, s=sd),
.names = "{str_replace(., '\\.(\\w{3}).*'), '\\2'}"),  n = n())
iris %>%
group_by(Species) %>%
summarise(across(everything(), list(m=mean, s=sd),
.names = "{str_replace(.x, '\\.(\\w{3}).*'), '\\2'}"),  n = n())
iris %>%
group_by(Species) %>%
summarise(across(everything(), list(m=mean, s=sd),
.names = "{~str_replace(.x, '\\.(\\w{3}).*'), '\\2'}"),  n = n())
iris %>%
group_by(Species) %>%
summarise(across(everything(), list(m=mean, s=sd),
.names = "{str_replace(col, '\\.(\\w{3}).*'), '\\2'}"),  n = n())
iris %>%
group_by(Species) %>%
summarise(across(everything(), list(m=mean, s=sd),
.names = "{str_replace(col, '[.](\\w{3}).*'), '\\2'}"),  n = n())
iris %>%
group_by(Species) %>%
summarise(across(everything(), list(m=mean, s=sd),
.names = "{str_replace(col, '[.]([A-z]{3}).*'), '\\2'}"),  n = n())
iris %>%
group_by(Species) %>%
summarise(across(everything(), list(m=mean, s=sd),
.names = "{str_replace(col, '[.]([A-z]{3}).*', '\\2')}"),  n = n())
iris %>%
group_by(Species) %>%
summarise(across(everything(), list(m=mean, s=sd),
.names = "{str_replace(col, '[.]([A-z]{3}).*', '\\1')}"),  n = n())
iris %>%
group_by(Species) %>%
summarise(across(everything(), list(m=mean, s=sd),
.names = "{str_remove(col, '.')"),  n = n())
iris %>%
group_by(Species) %>%
summarise(across(everything(), list(m=mean, s=sd),
.names = "{str_remove(col, '.')}"),  n = n())
iris %>%
group_by(Species) %>%
summarise(across(everything(), list(m=mean, s=sd),
.names = "{str_remove(col, '[.]')}"),  n = n())
iris %>%
group_by(Species) %>%
summarise(across(everything(), list(m=mean, s=sd),
.names = "{str_remove(col, '[.]')}{fn}"),  n = n())
iris %>%
group_by(Species) %>%
summarise(across(everything(), list(m=mean, s=sd),
.names = "{fn}{str_remove(col, '[.]')}"),  n = n())
iris %>%
group_by(Species) %>%
summarise(across(everything(), list(m=mean, s=sd),
.names = "{fn}{str_remove(col, '\\.')}"),  n = n())
iris %>%
group_by(Species) %>%
summarise(across(everything(), list(m=mean, s=sd),
.names = "{fn}{str_remove(col, '[.]')}"),  n = n())
iris %>%
group_by(Species) %>%
summarise(across(everything(), list(m=mean, s=sd),
.names = "{fn}{str_remove(col, '[.].*')}"),  n = n())
iris %>%
group_by(Species) %>%
summarise(across(everything(), list(m=mean, s=sd),
.names = "{fn}{str_replace(col, '[.](.{3})', '\\2')}"),  n = n())
iris %>%
group_by(Species) %>%
summarise(across(everything(), list(m=mean, s=sd),
.names = "{fn}{str_replace(col, '[.](.{3}).*', '\\2')}"),  n = n())
iris %>%
group_by(Species) %>%
summarise(across(everything(), list(m=mean, s=sd),
.names = "{fn}{str_replace(col, '[.](.{3})', '\\2')}"),  n = n())
?acrss
?across
iris %>%
group_by(Species) %>%
summarise(across(everything(), list(m=mean, s=sd),
.names = "{fn}{str_replace(.col, '[.](.{3})', '\\2')}"),  n = n())
iris %>%
reframe(across(starts_with("Sepal"), quantile_df, .unpack = "{outer}.{inner}"))
iris %>%
group_by(Species) %>%
summarise(across(everything(), list(m=mean, s=sd),
.names = "{fn}{.col}"),  n = n())
iris %>%
rename_with(~str_replace(.x, "\\.(\\w{3}).*", "\\1"))
iris %>%
rename_with(~str_replace(.x, "\\.(\\w{3}).*", "\\1")) %>%
group_by(Species) %>%
summarise(across(everything(), list(m=mean, s=sd), .names = "{fn}{.col}"),  n = n())
t.test
t.test(iris$Sepal.Length[1:50], iris$Sepal.Length[51:100])
t.test(Sepal.Length~Species, iris, Species == 1:100)
t.test(Sepal.Length~unclass(Species), iris, Species == 1:100)
t.test(Sepal.Length~unclass(Species), iris, rownames(iris) %in% 1:100)
t.test(Sepal.Length~(Species), iris, rownames(iris) %in% 1:100)
t.test(Sepal.Length~Species, iris, rownames(iris) %in% 1:100)
set.seed(1)
differences <- rep(NA, 10^4)
for(i in seq_along(differences)){
boot_population <- iris$Sepal.Length[1:100]
groupA <- sample(boot_population, 50, replace = TRUE)
groupB <- sample(boot_population, 50, replace = TRUE)
differences[i] <- mean(groupA) - mean(groupB)
}
summary(differences)
set.seed(1)
replicate(1e4, -diff(tapply( iris$Sepal.Length[1:100], sample(2, 100, TRUE), mean)))
set.seed(1)
a <- replicate(1e4, -diff(tapply( iris$Sepal.Length[1:100], sample(2, 100, TRUE), mean)))
summary(a)
set.seed(1)
boot_population <- iris$Sepal.Length[1:100]
a <- replicate(1e4, -diff(colMeans(replicate(2, sample(boot_population, 50, TRUE)))))
summary(a)
set.seed(1)
replicate(1e4, -diff(tapply(boot_population, sample(2, 100, TRUE), mean)))|>summary()
set.seed(1)
replicate(1e4, -diff(tapply(boot_population, sample(2, 100, TRUE), mean)))|>summary()
replicate(1e4, -diff(tapply(boot_population, sample(2, 100, TRUE), mean)))>0.93|>mean()
(replicate(1e4, -diff(tapply(boot_population, sample(2, 100, TRUE), mean)))>0.93)|>mean()
?do.call
params <- c(sd = 2, mean = 5)
args <- c(list(1:3), as.list(params))
args
do.call(dnorm, args)
dnorm(1:3, 5, 2) # similar to above
set.seed(1)
res <- numeric(1e4)
set.seed(1)
res <- numeric(1e4)
set.seed(1)
res <- numeric(1e4)
for(i in 1:1e^4){
set.seed(1)
res <- numeric(1e4)
for(i in 1:1e4){
d <- sample(boot_population, 100, TRUE)
res[i] <- mean(d[1:50]) - meand(d[51:100])
}
set.seed(1)
res <- numeric(1e4)
for(i in 1:1e4){
d <- sample(boot_population, 100, TRUE)
res[i] <- mean(d[1:50]) - mean(d[51:100])
}
summary(res)
set.seed(1)
replicate(1e4, diff(tapply(boot_population, sample(2, 100, TRUE), mean)))
set.seed(1)
replicate(1e4, diff(tapply(boot_population, sample(2, 100, TRUE), mean)))|>
summary()
set.seed(1)
replicate(1e4, -diff(tapply(boot_population, sample(2, 100, TRUE), mean)))|>
summary()
gl(50, 2)
gl(2, 50)
gr <- gl(2, 50)
set.seed(1)
gr <- gl(2, 50)
replicate(1e4, -diff(tapply(sample(boot_population), gr, mean)))|>
summary()
?uniroot
integrate(\(x)Vectorize(\(y)integrate(\(x,y)6*x*y^2, 0,1)$value), 0, 1)
integrate(\(x)Vectorize(\(y)integrate(\(y)6*x*y^2, 0,1)$value), 0, 1)
integrate(\(y)6*x*y^2, 0, 1)
integrate(\(y)6*x*y^2, 0, 1)$value
\(x)integrate(\(y)6*x*y^2, 0, 1)$value
Vectorize(\(x)integrate(\(y)6*x*y^2, 0, 1)$value)
integrate(Vectorize(\(x)integrate(\(y)6*x*y^2, 0, 1)$value), 0, 1)
integrate(Vectorize(\(x)integrate(\(y)6*x*y^2, 1-x, 1)$value), 0, 1)
aov(Sepal.Length~Sepal.Width, iris)
aov(Sepal.Length~Sepal.Width, iris)|>anova()
sqrt(.Machine$double.eps)
sqrt(.Machine$double.eps)|>sqrt()
?aspell
14000*120
14000*120/1e6
library(stats102a123456789)
as_pqnumber(10)
15*29
55000/1.9
55000/2
15.25*1.1
15.25*1.15
15.25*1.11
15.25*1.12
1.9*1.12
1.88*1.12
1.96*1.12
76555*1.12
28000*2.2
28000*2.2/3.25
df1 <- data.frame(x = c(1, 2, NA, 4, NA), y = c(6, NA, 8, 9, NA))
Map(combn, 2:3, MoreArgs = list(x = df1))
Map(combn, 1:2, MoreArgs = list(x = df1))
Map(combn, 1:2, MoreArgs = list(x = df1, simplify = FALSE))
df
df1
read.table(text=readClipboard())
read.table(text=readClipboard())->df1
Map(combn, 1:2, MoreArgs = list(x = df1, simplify = FALSE))
Map(combn, 1:2, MoreArgs = list(x = df3, simplify = FALSE))
Map(combn, seq_along(df1), MoreArgs = list(x = df1, simplify = FALSE))
Map(combn, seq_along(df1), MoreArgs = list(x = df1, simplify = FALSE, do.call, what = paste)
)
Map(combn, seq_along(df1), MoreArgs = list(x = df1, simplify = FALSE, do.call, what = paste))
Map(combn, seq_along(df1), MoreArgs = list(x = df1, do.call, what = paste))
mapply(combn, seq_along(df1), MoreArgs = list(x = df1, do.call, what = paste))
do.call(cbind, mapply(combn, seq_along(df1), MoreArgs = list(x = df1, do.call, what = paste)))
do.call(cbind, mapply(combn, seq_along(df1), MoreArgs = list(x = df1, do.call, what = paste0)))
df1
list(x = df1, FUN = \(x)data.frame(do.call(paste0, x)))|>
mapply(combn, seq_along(df1), MoreArgs = _)
list(x = df1, FUN = \(x)do.call(paste0, x))|>
mapply(combn, seq_along(df1), MoreArgs = _)
list(x = df1, FUN = \(x)do.call(paste0, x), simplify = FALSE)|>
mapply(combn, seq_along(df1), MoreArgs = _)
list(x = df1, FUN = \(x)list2DF(do.call(paste0, x)))|>
mapply(combn, seq_along(df1), MoreArgs = _)
list(x = df1, FUN = \(x)list2DF(do.call(paste0, x)), simplify = F)|>
mapply(combn, seq_along(df1), MoreArgs = _)
list(x = df1, FUN = \(x)do.call(paste0, x), simplify = F)|>
mapply(combn, seq_along(df1), MoreArgs = _)
list(x = df1, do.call, what = paste0) |>
mapply(combn, seq_along(df1), MoreArgs = _)
list(x = df1, do.call, what = paste0) |>
mapply(combn, seq_along(df1), MoreArgs = _)
list(x = df1, \(x)do.call(paste0, x)) |>
mapply(combn, seq_along(df1), MoreArgs = _)
list(x = df1, \(x)c(paste0(names(x)), do.call(paste0, x))) |>
mapply(combn, seq_along(df1), MoreArgs = _)
list(x = df1, \(x)c(paste0(names(x), collapse = ""), do.call(paste0, x))) |>
mapply(combn, seq_along(df1), MoreArgs = _)
args <- list(x = df1, \(x)c(paste0(names(x), collapse = ""), do.call(paste0, x)))
lapply(seq_along(df1), \(x)do.call(combn, c(n = x, args)))
lapply(seq_along(df1), \(i)do.call(combn, c(n = i, args)))
combn
lapply(seq_along(df1), \(i)do.call(combn, c(m = i, args)))
lapply(seq_along(df1), \(i)do.call(combn, c(m = i, args))[-1])
lapply(seq_along(df1), \(i)do.call(combn, c(m = i, args))[-1,])
UniPro(30,3)
UniPro <-function(n, m, s = n, NP = 100, itermax = 1500, pMut = NULL,
pCR = NULL, pGBest = NULL, replicates = 1,
seed = sample(1e7,1), ncores = NULL){
if(is.null(pGBest)) pGBest <- 0.9
args <- list(n = n, m = m, s = s, NP = NP, itermax = itermax, pMut = pMut,
pCR = pCR, pGBest = pGBest, replicates = replicates,
seed = seed, ncores = ncores, method = "UniPro")
if(is.null(pMut)&&is.null(pCR)){
p <- seq(0.05, 0.5, 5)
q <- rev(p)
v <- do.call(mapply, c(DE, modifyList(args, list(pMut = p, pCR = q))))
return(v)
idx <- which.min(unlist(v["measure", ]))
args$pCR <- q[idx]
args$pMut <- p[idx]
}
do.call(DE, args)
}
UniPro(30,3)
devtools::document()
UniPro(30,3)
UniPro <-function(n, m, s = n, NP = 100, itermax = 1500, pMut = NULL,
pCR = NULL, pGBest = NULL, replicates = 1,
seed = sample(1e7,1), ncores = NULL){
if(is.null(pGBest)) pGBest <- 0.9
args <- list(n = n, m = m, s = s, NP = NP, itermax = itermax, pMut = pMut,
pCR = pCR, pGBest = pGBest, replicates = replicates,
seed = seed, ncores = ncores, method = "UniPro")
if(is.null(pMut)&&is.null(pCR)){
p <- seq(0.05, 0.5, 5)
q <- rev(p)
return(args)
v <- do.call(mapply, c(DE, modifyList(args, list(pMut = p, pCR = q))))
return(v)
idx <- which.min(unlist(v["measure", ]))
args$pCR <- q[idx]
args$pMut <- p[idx]
}
do.call(DE, args)
}
devtools::document()
UniPro(30,3)
UniPro(30,3)->args
do.call(mapply, c(DE, modifyList(args, list(pMut = p, pCR = q))))
p <- seq(0.05, 0.5, 5)
q <- rev(p)
do.call(mapply, c(DE, modifyList(args, list(pMut = p, pCR = q))))
c(DE, modifyList(args, list(pMut = p, pCR = q)))
p <- seq(0.05, 0.5, length = 5)
q <- rev(p)
UniPro(30,3)->args
args
c(DE, modifyList(args, list(pMut = p, pCR = q)))
do.call(mapply, c(DE, modifyList(args, list(pMut = p, pCR = q))))
modifyList(args, list(pMut = p, pCR = q))
args
args$pCR <- NULL
args
args$pCr <- args$pMut <- NULL
v <- do.call(mapply, c(DE, list(pMut = p, pCR = q), MoreArgs = args))
v
c(DE, list(pMut = p, pCR = q), MoreArgs = args)
list(DE, list(pMut = p, pCR = q), MoreArgs = args)
do.call(mapply, list(DE, list(pMut = p, pCR = q), MoreArgs = args))
p
args
list(DE, list(pMut = p, pCR = q), MoreArgs = args)
v <- do.call(mapply, list(DE, pMut = p, pCR = q, MoreArgs = args))
devtools::document()
UniPro(30,3)
devtools::document()
UniPro(30,3)
devtools::document()
UniPro(30,3)
devtools::document()
UniPro(30,3)
UniPro(30,3, trace = TRUE)
devtools::document()
UniPro(30,3, trace = TRUE)
devtools::document()
UniPro(30,3, trace = TRUE)
UniPro(30,3, trace = 2)
devtools::document()
UniPro(30,3, trace = 2)
UniPro(30, 3, pMut = 0.3, pCR = 0.2, trace = 2)
UniPro(30, 3, pMut = 0.3, pCR = 0.9, trace = 2)
UniPro(30, 3, pMut = 0.3, pCR = 0.9, trace = 2, replicates = 100)->a
UniPro(30, 3, pMut = 0.3, pCR = 0.9, trace = TRUE, replicates = 100)->b
devtools::document()
UniPro(30, 3, pMut = 0.1, pCR = 0.9, trace = TRUE, replicates = 100)->b
b
UniPro(30, 3, pMut = 0.0, pCR = 0.9, trace = TRUE, replicates = 100)->d
d
UniPro(30, 3, pMut = 0.001, pCR = 0.9, trace = TRUE, replicates = 100)->d
d
UniPro(30, 3, pMut = 0.01, pCR = 0.9, trace = TRUE, replicates = 100)->d
d
UniPro(30, 3, pMut = 0.01, pCR = 0, trace = TRUE, replicates = 100)->d
d
UniPro(30, 3, pMut = 0.02, pCR = 0, trace = TRUE, replicates = 100)->d
d
boxplot(list(a=a$measure, b=b$measure, d=d$measure))
UniPro(30, 3, pMut = 0.2, pCR = 0, trace = TRUE, replicates = 100)->d
boxplot(list(a=a$measure, b=b$measure, d=d$measure))
UniPro(30, 3, pMut = 0.3, pCR = 0, trace = TRUE, replicates = 100)->d
boxplot(list(a=a$measure, b=b$measure, d=d$measure))
UniPro(30, 3, pMut = 0.5, pCR = 0, trace = TRUE, replicates = 100)->d
boxplot(list(a=a$measure, b=b$measure, d=d$measure))
UniPro(30, 3, pMut = 0.9, pCR = 0, trace = TRUE, replicates = 100)->d
boxplot(list(a=a$measure, b=b$measure, d=d$measure))
UniPro(30, 3, pMut = 0.5, pCR = 0, trace = TRUE, replicates = 100)->d
boxplot(list(a=a$measure, b=b$measure, d=d$measure))
install.packages('rsm')
install.packages('texreg')
setwd("C:/Users/samon/OneDrive/Desktop/papers_complete/individual_papers/chapters/DE")
# Example dataset
data(iris)
# Fit an ANOVA model
model <- aov(Sepal.Length ~ Species, data = iris)
# Get marginal means
emmeans::emmeans(model, ~ Species)
emmeans::emmip(name~Group)
emmeans::emmip(model, ~Species)
reticulate::repl_python()
reticulate::py_config()
reticulate::py_config("C:\Users\samon\AppData\Local\Microsoft\WindowsApps\python.exe")
reticulate::py_config(r"(C:\Users\samon\AppData\Local\Microsoft\WindowsApps\python.exe)")
?reticulate::py_config()
reticulate::use_python("C:/Users/samon/AppData/Local/Microsoft/WindowsApps/python.exe", required = TRUE)
file.edit("~/.Renviron")
Sys.unsetenv("RETICULATE_PYTHON")
reticulate::use_python(NULL)
Sys.unsetenv("RETICULATE_PYTHON")
reticulate::use_python("C:/Users/samon/AppData/Local/Microsoft/WindowsApps/python.exe", required = TRUE)
py_config()
Sys.unsetenv("RETICULATE_PYTHON")
reticulate::use_python("C:/Users/samon/AppData/Local/Microsoft/WindowsApps/python.exe", required = TRUE)
reticulate::py_config()
